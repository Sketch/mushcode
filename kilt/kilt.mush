@@ KILT PennMUSH Softcode testing framework
@@ Author: Sketch@M*U*S*H
@@
@@ KILT START - Reset test count
@@ KILT CHECK - Report count of tests, successes, and failures
@@ KILT expect = softcode - Check that 'expect' matches the output of softcode
@@ Use [@@(&attr testobject=value)] to temporarily replace an attribute value.
@@ Attributes will be restored regardless of other code failures.
@@ The value of mocked attributes cannot be &VAR_DELIM (default %t).
@@ Presently, the value of mocked attributes cannot contain the string ")]".
@@ Make sure your code has matching brackets and parentheses!


@create KILT
@set KILT=!no_command
@set KILT=Wizard

@command/add/eqsplit/noparse/rsnoparse KILT
@command/restrict KILT=FLAG^WIZARD
@startup KILT=@hook/override/inline KILT=KILT,KILT
&KILT KILT=$^KILT(/[a-zA-Z]*)?\s+(.*?)(?\:=(?<!\\=)(.*))?$:@include me/cmd_%+_[switch(%+,3,%2,4,basic)]=%2,%3,%1,%0
@set KILT/kilt=regexp

@restart KILT

&cmd_4_basic KILT=@include me/inc_before=%1; @include me/inc_main=%0,%1; @include me/inc_after
&cmd_3_start KILT=&data_test me=0; &data_failure me=0; &data_success me=0
&cmd_3_check KILT=@nspemit %#=ansi(switch(v(data_failure),>0,hr,hg),Tests: [default(data_test,0)]\, Successes: [default(data_success,0)]\, Failures: [default(data_failure,0)])

&queue_destroy KILT=@wipe me/queue_data_%0_*
&queue_push KILT=&queue_data_%0_[rjust(inc(nattr(me/queue_data_*)),4,0)] me=%1
&queue_activate KILT=@dolist/inplace lattr(me/queue_data_%0_*)={@include/nobreak/localize me/%i0};@include me/queue_destroy=%0

@set KILT=var_delim:%t
&inc_before KILT=@dolist/inplace/delim [v(var_delim)] [u(get_stubs,%0,v(var_delim))]={ @include me/queue_push=stubs,&[first(%i0)] [u(inc_before_fun,%#,%i0)]=lit\([xget(rest(before(%i0,=)),first(%i0))]\); &[first(%i0)] [u(inc_before_fun,%#,%i0)]=[after(%i0,=)] ; think &[first(%i0)] [u(inc_before_fun,%#,%i0)]=[after(%i0,=)] }
&inc_before_fun KILT=locate(%0,rest(before(%1,=)),*)

&evaluate KILT=ulambda(#lambda/objeval(%0,%1),%0,%1)
&inc_main KILT=@include/nobreak me/inc_main_process=u(evaluate,%#,%0),u(evaluate,%#,%1)
&inc_main_process KILT=@include me/inc_record=%0,%1,u(compare,%0,%1); @assert cor(v(var_verbose),not(u(compare,%0,%1))); @include me/inc_report=%0,%1,u(compare,%0,%1)
&inc_after KILT=@include me/queue_activate=stubs

&inc_report KILT=@nspemit %#=ansi(ifelse(%2,hg,hr),ifelse(%2,PASS,FAIL)[ansi(n,|)] %0 [ansi(n,==)] %1)
&inc_record KILT=&data_test me=inc(default(me/data_test,0)); &data_[switch(%2,1,success,0,failure)] me=inc(default(me/data_[switch(%2,1,success,0,failure)],0))
&compare KILT=switch(%1,%0,1,0)


&get_stubs KILT=trimpenn(u(get_stubs_recurse,%0,%1),%1,R)
&get_stubs_recurse KILT=ifelse(regmatch(%0,v(get_stubs_regexp),1:1),%q1%1[u(get_stubs_recurse,after(%0,%q1),%1)],@@())
&get_stubs_regexp KILT=\[@@\(&(.*?)\)\]


@@ *** Test section ***
KILT START

@@ Basics
KILT 1=1
KILT 1\=1=1\=1

@@ Right-hand-side parser tests
KILT x y\=z  =  [u(kilt/get_stubs,lit([@@(&x y=z)]),|)]
KILT = [u(kilt/get_stubs,lit(&x y=z),|)]
KILT one two\=three four   =  [u(kilt/get_stubs,lit([@@(&one two=three four)]),|)]
KILT one two\=three four|x y\=z  =  [u(kilt/get_stubs,lit([@@(&one two=three four)] [@@(&x y=z)]),|)]

KILT final=[@@(&testattr kilt=final)][get(kilt/testattr)]

@@ Two-step dependant test: Make sure KILT restores attributes without evaluating
&temp_test KILT=left(STR,1)
KILT =[@@(&temp_test KILT=)][get(KILT/temp_test)]
KILT left\(STR\,1\)=[get(KILT/temp_test)]
&temp_test KILT

@@ Set three things without overlapping their contents.
KILT hi kilt\=hello|beep kilt\=bop|glee kilt\=zot!=[u(KILT/get_stubs,lit([@@(&hi kilt=hello)][@@(&beep kilt=bop)][@@(&glee kilt=zot!)]),|)]

KILT CHECK
